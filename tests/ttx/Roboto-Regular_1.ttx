<?xml version="1.0" encoding="UTF-8"?>
<ttFont sfntVersion="\x00\x01\x00\x00" ttLibVersion="4.50">

  <GlyphOrder>
    <!-- The 'id' attribute is only for humans; it is ignored when parsed. -->
    <GlyphID id="0" name=".notdef"/>
    <GlyphID id="1" name="glyph00001"/>
    <GlyphID id="2" name="glyph00002"/>
    <GlyphID id="3" name="glyph00003"/>
    <GlyphID id="4" name="glyph00004"/>
    <GlyphID id="5" name="glyph00005"/>
  </GlyphOrder>

  <head>
    <!-- Most of this table will be recalculated by the compiler -->
    <tableVersion value="1.0"/>
    <fontRevision value="2.137"/>
    <checkSumAdjustment value="0xd056dc4b"/>
    <magicNumber value="0x5f0f3cf5"/>
    <flags value="00000000 00011001"/>
    <unitsPerEm value="2048"/>
    <created value="Fri Sep 12 12:29:34 2008"/>
    <modified value="Wed Mar 29 12:03:00 2017"/>
    <xMin value="-1509"/>
    <yMin value="-555"/>
    <xMax value="2352"/>
    <yMax value="2163"/>
    <macStyle value="00000000 00000000"/>
    <lowestRecPPEM value="9"/>
    <fontDirectionHint value="2"/>
    <indexToLocFormat value="0"/>
    <glyphDataFormat value="0"/>
  </head>

  <hhea>
    <tableVersion value="0x00010000"/>
    <ascent value="1900"/>
    <descent value="-500"/>
    <lineGap value="0"/>
    <advanceWidthMax value="2377"/>
    <minLeftSideBearing value="-1509"/>
    <minRightSideBearing value="-438"/>
    <xMaxExtent value="2352"/>
    <caretSlopeRise value="1"/>
    <caretSlopeRun value="0"/>
    <caretOffset value="0"/>
    <reserved0 value="0"/>
    <reserved1 value="0"/>
    <reserved2 value="0"/>
    <reserved3 value="0"/>
    <metricDataFormat value="0"/>
    <numberOfHMetrics value="2"/>
  </hhea>

  <maxp>
    <!-- Most of this table will be recalculated by the compiler -->
    <tableVersion value="0x10000"/>
    <numGlyphs value="6"/>
    <maxPoints value="143"/>
    <maxContours value="22"/>
    <maxCompositePoints value="84"/>
    <maxCompositeContours value="5"/>
    <maxZones value="1"/>
    <maxTwilightPoints value="0"/>
    <maxStorage value="0"/>
    <maxFunctionDefs value="14"/>
    <maxInstructionDefs value="0"/>
    <maxStackElements value="512"/>
    <maxSizeOfInstructions value="548"/>
    <maxComponentElements value="6"/>
    <maxComponentDepth value="1"/>
  </maxp>

  <hmtx>
    <mtx name=".notdef" width="908" lsb="100"/>
    <mtx name="glyph00001" width="1039" lsb="85"/>
    <mtx name="glyph00002" width="1039" lsb="128"/>
    <mtx name="glyph00003" width="1039" lsb="48"/>
    <mtx name="glyph00004" width="1039" lsb="78"/>
    <mtx name="glyph00005" width="1039" lsb="78"/>
  </hmtx>

  <fpgm>
    <assembly>
      PUSHB[ ]	/* 1 value pushed */
      0
      FDEF[ ]	/* FunctionDefinition */
        MPPEM[ ]	/* MeasurePixelPerEm */
        PUSHB[ ]	/* 1 value pushed */
        9
        LT[ ]	/* LessThan */
        IF[ ]	/* If */
          PUSHB[ ]	/* 2 values pushed */
          1 1
          INSTCTRL[ ]	/* SetInstrExecControl */
        EIF[ ]	/* EndIf */
        PUSHW[ ]	/* 1 value pushed */
        511
        SCANCTRL[ ]	/* ScanConversionControl */
        PUSHB[ ]	/* 1 value pushed */
        132
        SCVTCI[ ]	/* SetCVTCutIn */
        PUSHB[ ]	/* 2 values pushed */
        9 3
        SDS[ ]	/* SetDeltaShiftInGState */
        SDB[ ]	/* SetDeltaBaseInGState */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      1
      FDEF[ ]	/* FunctionDefinition */
        DUP[ ]	/* DuplicateTopStack */
        DUP[ ]	/* DuplicateTopStack */
        RCVT[ ]	/* ReadCVT */
        ROUND[01]	/* Round */
        WCVTP[ ]	/* WriteCVTInPixels */
        PUSHB[ ]	/* 1 value pushed */
        1
        ADD[ ]	/* Add */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      2
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        1
        LOOPCALL[ ]	/* LoopAndCallFunction */
        POP[ ]	/* PopTopStack */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      3
      FDEF[ ]	/* FunctionDefinition */
        DUP[ ]	/* DuplicateTopStack */
        GC[0]	/* GetCoordOnPVector */
        PUSHB[ ]	/* 1 value pushed */
        3
        CINDEX[ ]	/* CopyXToTopStack */
        GC[0]	/* GetCoordOnPVector */
        GT[ ]	/* GreaterThan */
        IF[ ]	/* If */
          SWAP[ ]	/* SwapTopStack */
        EIF[ ]	/* EndIf */
        DUP[ ]	/* DuplicateTopStack */
        ROLL[ ]	/* RollTopThreeStack */
        DUP[ ]	/* DuplicateTopStack */
        ROLL[ ]	/* RollTopThreeStack */
        MD[0]	/* MeasureDistance */
        ABS[ ]	/* Absolute */
        ROLL[ ]	/* RollTopThreeStack */
        DUP[ ]	/* DuplicateTopStack */
        GC[0]	/* GetCoordOnPVector */
        DUP[ ]	/* DuplicateTopStack */
        ROUND[00]	/* Round */
        SUB[ ]	/* Subtract */
        ABS[ ]	/* Absolute */
        PUSHB[ ]	/* 1 value pushed */
        4
        CINDEX[ ]	/* CopyXToTopStack */
        GC[0]	/* GetCoordOnPVector */
        DUP[ ]	/* DuplicateTopStack */
        ROUND[00]	/* Round */
        SUB[ ]	/* Subtract */
        ABS[ ]	/* Absolute */
        GT[ ]	/* GreaterThan */
        IF[ ]	/* If */
          SWAP[ ]	/* SwapTopStack */
          NEG[ ]	/* Negate */
          ROLL[ ]	/* RollTopThreeStack */
        EIF[ ]	/* EndIf */
        MDAP[1]	/* MoveDirectAbsPt */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        0
        GTEQ[ ]	/* GreaterThanOrEqual */
        IF[ ]	/* If */
          ROUND[01]	/* Round */
          DUP[ ]	/* DuplicateTopStack */
          PUSHB[ ]	/* 1 value pushed */
          0
          EQ[ ]	/* Equal */
          IF[ ]	/* If */
            POP[ ]	/* PopTopStack */
            PUSHB[ ]	/* 1 value pushed */
            64
          EIF[ ]	/* EndIf */
        ELSE[ ]	/* Else */
          ROUND[01]	/* Round */
          DUP[ ]	/* DuplicateTopStack */
          PUSHB[ ]	/* 1 value pushed */
          0
          EQ[ ]	/* Equal */
          IF[ ]	/* If */
            POP[ ]	/* PopTopStack */
            PUSHB[ ]	/* 1 value pushed */
            64
            NEG[ ]	/* Negate */
          EIF[ ]	/* EndIf */
        EIF[ ]	/* EndIf */
        MSIRP[0]	/* MoveStackIndirRelPt */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      4
      FDEF[ ]	/* FunctionDefinition */
        DUP[ ]	/* DuplicateTopStack */
        GC[0]	/* GetCoordOnPVector */
        PUSHB[ ]	/* 1 value pushed */
        4
        CINDEX[ ]	/* CopyXToTopStack */
        GC[0]	/* GetCoordOnPVector */
        GT[ ]	/* GreaterThan */
        IF[ ]	/* If */
          SWAP[ ]	/* SwapTopStack */
          ROLL[ ]	/* RollTopThreeStack */
        EIF[ ]	/* EndIf */
        DUP[ ]	/* DuplicateTopStack */
        GC[0]	/* GetCoordOnPVector */
        DUP[ ]	/* DuplicateTopStack */
        ROUND[10]	/* Round */
        SUB[ ]	/* Subtract */
        ABS[ ]	/* Absolute */
        PUSHB[ ]	/* 1 value pushed */
        4
        CINDEX[ ]	/* CopyXToTopStack */
        GC[0]	/* GetCoordOnPVector */
        DUP[ ]	/* DuplicateTopStack */
        ROUND[10]	/* Round */
        SUB[ ]	/* Subtract */
        ABS[ ]	/* Absolute */
        GT[ ]	/* GreaterThan */
        IF[ ]	/* If */
          SWAP[ ]	/* SwapTopStack */
          ROLL[ ]	/* RollTopThreeStack */
        EIF[ ]	/* EndIf */
        MDAP[1]	/* MoveDirectAbsPt */
        MIRP[11101]	/* MoveIndirectRelPt */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      5
      FDEF[ ]	/* FunctionDefinition */
        MPPEM[ ]	/* MeasurePixelPerEm */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        3
        MINDEX[ ]	/* MoveXToTopStack */
        LT[ ]	/* LessThan */
        IF[ ]	/* If */
          LTEQ[ ]	/* LessThenOrEqual */
          IF[ ]	/* If */
            PUSHB[ ]	/* 1 value pushed */
            128
            WCVTP[ ]	/* WriteCVTInPixels */
          ELSE[ ]	/* Else */
            PUSHB[ ]	/* 1 value pushed */
            64
            WCVTP[ ]	/* WriteCVTInPixels */
          EIF[ ]	/* EndIf */
        ELSE[ ]	/* Else */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
          DUP[ ]	/* DuplicateTopStack */
          RCVT[ ]	/* ReadCVT */
          PUSHB[ ]	/* 1 value pushed */
          192
          LT[ ]	/* LessThan */
          IF[ ]	/* If */
            PUSHB[ ]	/* 1 value pushed */
            192
            WCVTP[ ]	/* WriteCVTInPixels */
          ELSE[ ]	/* Else */
            POP[ ]	/* PopTopStack */
          EIF[ ]	/* EndIf */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      6
      FDEF[ ]	/* FunctionDefinition */
        DUP[ ]	/* DuplicateTopStack */
        DUP[ ]	/* DuplicateTopStack */
        RCVT[ ]	/* ReadCVT */
        ROUND[01]	/* Round */
        WCVTP[ ]	/* WriteCVTInPixels */
        PUSHB[ ]	/* 1 value pushed */
        1
        ADD[ ]	/* Add */
        DUP[ ]	/* DuplicateTopStack */
        DUP[ ]	/* DuplicateTopStack */
        RCVT[ ]	/* ReadCVT */
        RDTG[ ]	/* RoundDownToGrid */
        ROUND[01]	/* Round */
        RTG[ ]	/* RoundToGrid */
        WCVTP[ ]	/* WriteCVTInPixels */
        PUSHB[ ]	/* 1 value pushed */
        1
        ADD[ ]	/* Add */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      7
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        6
        LOOPCALL[ ]	/* LoopAndCallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      8
      FDEF[ ]	/* FunctionDefinition */
        MPPEM[ ]	/* MeasurePixelPerEm */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        3
        MINDEX[ ]	/* MoveXToTopStack */
        GTEQ[ ]	/* GreaterThanOrEqual */
        IF[ ]	/* If */
          PUSHB[ ]	/* 1 value pushed */
          64
        ELSE[ ]	/* Else */
          PUSHB[ ]	/* 1 value pushed */
          0
        EIF[ ]	/* EndIf */
        ROLL[ ]	/* RollTopThreeStack */
        ROLL[ ]	/* RollTopThreeStack */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        3
        MINDEX[ ]	/* MoveXToTopStack */
        GTEQ[ ]	/* GreaterThanOrEqual */
        IF[ ]	/* If */
          SWAP[ ]	/* SwapTopStack */
          POP[ ]	/* PopTopStack */
          PUSHB[ ]	/* 1 value pushed */
          128
          ROLL[ ]	/* RollTopThreeStack */
          ROLL[ ]	/* RollTopThreeStack */
        ELSE[ ]	/* Else */
          ROLL[ ]	/* RollTopThreeStack */
          SWAP[ ]	/* SwapTopStack */
        EIF[ ]	/* EndIf */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        3
        MINDEX[ ]	/* MoveXToTopStack */
        GTEQ[ ]	/* GreaterThanOrEqual */
        IF[ ]	/* If */
          SWAP[ ]	/* SwapTopStack */
          POP[ ]	/* PopTopStack */
          PUSHB[ ]	/* 1 value pushed */
          192
          ROLL[ ]	/* RollTopThreeStack */
          ROLL[ ]	/* RollTopThreeStack */
        ELSE[ ]	/* Else */
          ROLL[ ]	/* RollTopThreeStack */
          SWAP[ ]	/* SwapTopStack */
        EIF[ ]	/* EndIf */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        3
        MINDEX[ ]	/* MoveXToTopStack */
        GTEQ[ ]	/* GreaterThanOrEqual */
        IF[ ]	/* If */
          SWAP[ ]	/* SwapTopStack */
          POP[ ]	/* PopTopStack */
          PUSHW[ ]	/* 1 value pushed */
          256
          ROLL[ ]	/* RollTopThreeStack */
          ROLL[ ]	/* RollTopThreeStack */
        ELSE[ ]	/* Else */
          ROLL[ ]	/* RollTopThreeStack */
          SWAP[ ]	/* SwapTopStack */
        EIF[ ]	/* EndIf */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        3
        MINDEX[ ]	/* MoveXToTopStack */
        GTEQ[ ]	/* GreaterThanOrEqual */
        IF[ ]	/* If */
          SWAP[ ]	/* SwapTopStack */
          POP[ ]	/* PopTopStack */
          PUSHW[ ]	/* 1 value pushed */
          320
          ROLL[ ]	/* RollTopThreeStack */
          ROLL[ ]	/* RollTopThreeStack */
        ELSE[ ]	/* Else */
          ROLL[ ]	/* RollTopThreeStack */
          SWAP[ ]	/* SwapTopStack */
        EIF[ ]	/* EndIf */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        3
        MINDEX[ ]	/* MoveXToTopStack */
        GTEQ[ ]	/* GreaterThanOrEqual */
        IF[ ]	/* If */
          PUSHB[ ]	/* 1 value pushed */
          3
          CINDEX[ ]	/* CopyXToTopStack */
          RCVT[ ]	/* ReadCVT */
          PUSHW[ ]	/* 1 value pushed */
          384
          LT[ ]	/* LessThan */
          IF[ ]	/* If */
            SWAP[ ]	/* SwapTopStack */
            POP[ ]	/* PopTopStack */
            PUSHW[ ]	/* 1 value pushed */
            384
            SWAP[ ]	/* SwapTopStack */
            POP[ ]	/* PopTopStack */
          ELSE[ ]	/* Else */
            PUSHB[ ]	/* 1 value pushed */
            3
            CINDEX[ ]	/* CopyXToTopStack */
            RCVT[ ]	/* ReadCVT */
            SWAP[ ]	/* SwapTopStack */
            POP[ ]	/* PopTopStack */
            SWAP[ ]	/* SwapTopStack */
            POP[ ]	/* PopTopStack */
          EIF[ ]	/* EndIf */
        ELSE[ ]	/* Else */
          POP[ ]	/* PopTopStack */
        EIF[ ]	/* EndIf */
        WCVTP[ ]	/* WriteCVTInPixels */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      9
      FDEF[ ]	/* FunctionDefinition */
        MPPEM[ ]	/* MeasurePixelPerEm */
        GTEQ[ ]	/* GreaterThanOrEqual */
        IF[ ]	/* If */
          RCVT[ ]	/* ReadCVT */
          WCVTP[ ]	/* WriteCVTInPixels */
        ELSE[ ]	/* Else */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      10
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        40
        RCVT[ ]	/* ReadCVT */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      11
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        41
        RCVT[ ]	/* ReadCVT */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      12
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 2 values pushed */
        39 1
        GETINFO[ ]	/* GetInfo */
        DUP[ ]	/* DuplicateTopStack */
        ROLL[ ]	/* RollTopThreeStack */
        GTEQ[ ]	/* GreaterThanOrEqual */
        IF[ ]	/* If */
          PUSHW[ ]	/* 2 values pushed */
          16384 1024
          MUL[ ]	/* Multiply */
          PUSHW[ ]	/* 1 value pushed */
          2048
          GETINFO[ ]	/* GetInfo */
          EQ[ ]	/* Equal */
          IF[ ]	/* If */
            PUSHW[ ]	/* 2 values pushed */
            40 1000
            WCVTF[ ]	/* WriteCVTInFUnits */
          EIF[ ]	/* EndIf */
        ELSE[ ]	/* Else */
          PUSHB[ ]	/* 1 value pushed */
          35
          GTEQ[ ]	/* GreaterThanOrEqual */
          IF[ ]	/* If */
            PUSHB[ ]	/* 1 value pushed */
            32
            GETINFO[ ]	/* GetInfo */
            PUSHW[ ]	/* 1 value pushed */
            4096
            EQ[ ]	/* Equal */
            IF[ ]	/* If */
              PUSHW[ ]	/* 2 values pushed */
              40 1000
              WCVTF[ ]	/* WriteCVTInFUnits */
            EIF[ ]	/* EndIf */
          EIF[ ]	/* EndIf */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      13
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        64
        GETINFO[ ]	/* GetInfo */
        PUSHW[ ]	/* 1 value pushed */
        8192
        AND[ ]	/* LogicalAnd */
        IF[ ]	/* If */
          PUSHB[ ]	/* 2 values pushed */
          41 0
          WCVTP[ ]	/* WriteCVTInPixels */
        ELSE[ ]	/* Else */
          PUSHW[ ]	/* 2 values pushed */
          41 1000
          WCVTP[ ]	/* WriteCVTInPixels */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
    </assembly>
  </fpgm>

  <prep>
    <assembly>
      PUSHB[ ]	/* 1 value pushed */
      12
      CALL[ ]	/* CallFunction */
      PUSHB[ ]	/* 1 value pushed */
      0
      CALL[ ]	/* CallFunction */
      SVTCA[0]	/* SetFPVectorToAxis */
      PUSHB[ ]	/* 3 values pushed */
      1 16 2
      CALL[ ]	/* CallFunction */
      SVTCA[1]	/* SetFPVectorToAxis */
      PUSHB[ ]	/* 3 values pushed */
      17 1 2
      CALL[ ]	/* CallFunction */
      SVTCA[1]	/* SetFPVectorToAxis */
      PUSHB[ ]	/* 8 values pushed */
      17 58 48 37 27 16 0 8
      CALL[ ]	/* CallFunction */
      SVTCA[0]	/* SetFPVectorToAxis */
      PUSHB[ ]	/* 8 values pushed */
      1 72 59 46 33 20 0 8
      CALL[ ]	/* CallFunction */
      PUSHB[ ]	/* 8 values pushed */
      2 88 72 56 40 20 0 8
      CALL[ ]	/* CallFunction */
      PUSHB[ ]	/* 8 values pushed */
      3 82 67 52 37 22 0 8
      CALL[ ]	/* CallFunction */
      PUSHB[ ]	/* 8 values pushed */
      4 94 77 60 43 25 0 8
      CALL[ ]	/* CallFunction */
      PUSHB[ ]	/* 8 values pushed */
      5 54 44 34 25 15 0 8
      CALL[ ]	/* CallFunction */
      PUSHB[ ]	/* 8 values pushed */
      6 113 93 70 50 27 0 8
      CALL[ ]	/* CallFunction */
      PUSHB[ ]	/* 8 values pushed */
      7 145 119 92 58 35 0 8
      CALL[ ]	/* CallFunction */
      PUSHB[ ]	/* 8 values pushed */
      8 126 103 80 57 26 0 8
      CALL[ ]	/* CallFunction */
      PUSHB[ ]	/* 8 values pushed */
      9 84 69 54 38 20 0 8
      CALL[ ]	/* CallFunction */
      PUSHB[ ]	/* 8 values pushed */
      10 118 96 75 54 29 0 8
      CALL[ ]	/* CallFunction */
      PUSHB[ ]	/* 8 values pushed */
      11 131 100 78 58 35 0 8
      CALL[ ]	/* CallFunction */
      PUSHB[ ]	/* 8 values pushed */
      12 217 178 138 99 60 0 8
      CALL[ ]	/* CallFunction */
      PUSHB[ ]	/* 8 values pushed */
      13 20 16 12 9 6 0 8
      CALL[ ]	/* CallFunction */
      PUSHB[ ]	/* 8 values pushed */
      14 60 50 39 28 17 0 8
      CALL[ ]	/* CallFunction */
      PUSHB[ ]	/* 8 values pushed */
      15 64 52 41 29 20 0 8
      CALL[ ]	/* CallFunction */
      PUSHB[ ]	/* 8 values pushed */
      16 80 65 46 33 20 0 8
      CALL[ ]	/* CallFunction */
      SVTCA[0]	/* SetFPVectorToAxis */
      PUSHB[ ]	/* 3 values pushed */
      18 11 7
      CALL[ ]	/* CallFunction */
      PUSHB[ ]	/* 1 value pushed */
      0
      DUP[ ]	/* DuplicateTopStack */
      RCVT[ ]	/* ReadCVT */
      RDTG[ ]	/* RoundDownToGrid */
      ROUND[01]	/* Round */
      RTG[ ]	/* RoundToGrid */
      WCVTP[ ]	/* WriteCVTInPixels */
      PUSHB[ ]	/* 3 values pushed */
      63 26 1
      DELTAC1[ ]	/* DeltaExceptionC1 */
      PUSHB[ ]	/* 3 values pushed */
      95 26 1
      DELTAC1[ ]	/* DeltaExceptionC1 */
      PUSHB[ ]	/* 3 values pushed */
      127 26 1
      DELTAC1[ ]	/* DeltaExceptionC1 */
      PUSHB[ ]	/* 3 values pushed */
      47 26 1
      DELTAC2[ ]	/* DeltaExceptionC2 */
      PUSHB[ ]	/* 3 values pushed */
      79 26 1
      DELTAC2[ ]	/* DeltaExceptionC2 */
      PUSHB[ ]	/* 3 values pushed */
      111 26 1
      DELTAC2[ ]	/* DeltaExceptionC2 */
      PUSHB[ ]	/* 3 values pushed */
      143 26 1
      DELTAC2[ ]	/* DeltaExceptionC2 */
      PUSHB[ ]	/* 3 values pushed */
      175 26 1
      DELTAC2[ ]	/* DeltaExceptionC2 */
      PUSHB[ ]	/* 3 values pushed */
      255 26 1
      DELTAC2[ ]	/* DeltaExceptionC2 */
      PUSHB[ ]	/* 3 values pushed */
      31 26 1
      DELTAC3[ ]	/* DeltaExceptionC3 */
      PUSHB[ ]	/* 3 values pushed */
      63 26 1
      DELTAC3[ ]	/* DeltaExceptionC3 */
      PUSHB[ ]	/* 3 values pushed */
      95 26 1
      DELTAC3[ ]	/* DeltaExceptionC3 */
      PUSHB[ ]	/* 3 values pushed */
      127 26 1
      DELTAC3[ ]	/* DeltaExceptionC3 */
      PUSHB[ ]	/* 3 values pushed */
      15 30 1
      DELTAC1[ ]	/* DeltaExceptionC1 */
      PUSHB[ ]	/* 3 values pushed */
      127 30 1
      DELTAC1[ ]	/* DeltaExceptionC1 */
      PUSHB[ ]	/* 3 values pushed */
      239 30 1
      DELTAC1[ ]	/* DeltaExceptionC1 */
      PUSHB[ ]	/* 3 values pushed */
      31 30 1
      DELTAC2[ ]	/* DeltaExceptionC2 */
      PUSHB[ ]	/* 3 values pushed */
      95 30 1
      DELTAC2[ ]	/* DeltaExceptionC2 */
      PUSHB[ ]	/* 3 values pushed */
      143 30 1
      DELTAC2[ ]	/* DeltaExceptionC2 */
      PUSHB[ ]	/* 3 values pushed */
      207 30 1
      DELTAC2[ ]	/* DeltaExceptionC2 */
      PUSHB[ ]	/* 3 values pushed */
      255 30 1
      DELTAC2[ ]	/* DeltaExceptionC2 */
      PUSHB[ ]	/* 3 values pushed */
      63 30 1
      DELTAC3[ ]	/* DeltaExceptionC3 */
      PUSHB[ ]	/* 3 values pushed */
      111 30 1
      DELTAC3[ ]	/* DeltaExceptionC3 */
      PUSHB[ ]	/* 3 values pushed */
      47 32 1
      DELTAC1[ ]	/* DeltaExceptionC1 */
      PUSHB[ ]	/* 3 values pushed */
      111 32 1
      DELTAC1[ ]	/* DeltaExceptionC1 */
    </assembly>
  </prep>

  <cvt>
    <cv index="0" value="42"/>
    <cv index="1" value="157"/>
    <cv index="2" value="128"/>
    <cv index="3" value="138"/>
    <cv index="4" value="120"/>
    <cv index="5" value="212"/>
    <cv index="6" value="100"/>
    <cv index="7" value="78"/>
    <cv index="8" value="90"/>
    <cv index="9" value="135"/>
    <cv index="10" value="96"/>
    <cv index="11" value="86"/>
    <cv index="12" value="52"/>
    <cv index="13" value="572"/>
    <cv index="14" value="188"/>
    <cv index="15" value="178"/>
    <cv index="16" value="142"/>
    <cv index="17" value="196"/>
    <cv index="18" value="0"/>
    <cv index="19" value="20"/>
    <cv index="20" value="-416"/>
    <cv index="21" value="20"/>
    <cv index="22" value="667"/>
    <cv index="23" value="32"/>
    <cv index="24" value="801"/>
    <cv index="25" value="11"/>
    <cv index="26" value="1082"/>
    <cv index="27" value="20"/>
    <cv index="28" value="1165"/>
    <cv index="29" value="16"/>
    <cv index="30" value="1456"/>
    <cv index="31" value="20"/>
    <cv index="32" value="1560"/>
    <cv index="33" value="21"/>
    <cv index="34" value="422"/>
    <cv index="35" value="17"/>
    <cv index="36" value="1728"/>
    <cv index="37" value="14"/>
    <cv index="38" value="1753"/>
    <cv index="39" value="6"/>
    <cv index="40" value="0"/>
    <cv index="41" value="0"/>
  </cvt>

  <loca>
    <!-- The 'loca' table will be calculated by the compiler -->
  </loca>

  <glyf>

    <!-- The xMin, yMin, xMax and yMax values
         will be recalculated by the compiler. -->

    <TTGlyph name=".notdef" xMin="100" yMin="0" xMax="808" yMax="1456">
      <contour>
        <pt x="808" y="0" on="1"/>
        <pt x="100" y="0" on="1"/>
        <pt x="100" y="1456" on="1"/>
        <pt x="808" y="1456" on="1"/>
      </contour>
      <contour>
        <pt x="754" y="84" on="1"/>
        <pt x="754" y="1371" on="1"/>
        <pt x="480" y="728" on="1"/>
      </contour>
      <contour>
        <pt x="154" y="1359" on="1"/>
        <pt x="154" y="96" on="1"/>
        <pt x="422" y="728" on="1"/>
      </contour>
      <contour>
        <pt x="194" y="54" on="1"/>
        <pt x="709" y="54" on="1"/>
        <pt x="451" y="660" on="1"/>
      </contour>
      <contour>
        <pt x="451" y="796" on="1"/>
        <pt x="709" y="1402" on="1"/>
        <pt x="194" y="1402" on="1"/>
      </contour>
      <instructions>
        <assembly>
          PUSHB[ ]	/* 3 values pushed */
          12 16 17
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          PUSHB[ ]	/* 1 value pushed */
          12
          SRP0[ ]	/* SetRefPoint0 */
          PUSHB[ ]	/* 1 value pushed */
          0
          MDRP[10000]	/* MoveDirectRelPt */
          PUSHB[ ]	/* 1 value pushed */
          12
          SRP0[ ]	/* SetRefPoint0 */
          PUSHB[ ]	/* 1 value pushed */
          6
          MDRP[10000]	/* MoveDirectRelPt */
          PUSHB[ ]	/* 1 value pushed */
          12
          SRP0[ ]	/* SetRefPoint0 */
          PUSHB[ ]	/* 1 value pushed */
          9
          MDRP[10000]	/* MoveDirectRelPt */
          PUSHB[ ]	/* 1 value pushed */
          12
          SRP0[ ]	/* SetRefPoint0 */
          PUSHB[ ]	/* 1 value pushed */
          13
          MDRP[10000]	/* MoveDirectRelPt */
          SVTCA[0]	/* SetFPVectorToAxis */
          PUSHB[ ]	/* 1 value pushed */
          0
          RCVT[ ]	/* ReadCVT */
          IF[ ]	/* If */
            PUSHB[ ]	/* 1 value pushed */
            2
            MDAP[1]	/* MoveDirectAbsPt */
          ELSE[ ]	/* Else */
            PUSHB[ ]	/* 2 values pushed */
            2 30
            MIAP[0]	/* MoveIndirectAbsPt */
          EIF[ ]	/* EndIf */
          PUSHB[ ]	/* 1 value pushed */
          0
          RCVT[ ]	/* ReadCVT */
          IF[ ]	/* If */
            PUSHB[ ]	/* 1 value pushed */
            0
            MDAP[1]	/* MoveDirectAbsPt */
          ELSE[ ]	/* Else */
            PUSHB[ ]	/* 2 values pushed */
            0 18
            MIAP[0]	/* MoveIndirectAbsPt */
          EIF[ ]	/* EndIf */
          PUSHB[ ]	/* 3 values pushed */
          4 2 0
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          PUSHB[ ]	/* 3 values pushed */
          5 2 0
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          PUSHB[ ]	/* 3 values pushed */
          7 2 0
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          PUSHB[ ]	/* 3 values pushed */
          8 2 0
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          PUSHB[ ]	/* 2 values pushed */
          10 12
          MIRP[10100]	/* MoveIndirectRelPt */
          PUSHB[ ]	/* 3 values pushed */
          12 2 0
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          PUSHB[ ]	/* 3 values pushed */
          13 2 0
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          PUSHB[ ]	/* 1 value pushed */
          2
          SRP0[ ]	/* SetRefPoint0 */
          PUSHB[ ]	/* 2 values pushed */
          14 12
          MIRP[10100]	/* MoveIndirectRelPt */
          IUP[0]	/* InterpolateUntPts */
          IUP[1]	/* InterpolateUntPts */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="glyph00001" xMin="85" yMin="-6" xMax="922" yMax="1181">
      <contour>
        <pt x="735" y="492" on="1"/>
        <pt x="634" y="382" on="0"/>
        <pt x="463" y="382" on="1"/>
        <pt x="289" y="382" on="0"/>
        <pt x="85" y="597" on="0"/>
        <pt x="85" y="773" on="1"/>
        <pt x="85" y="953" on="0"/>
        <pt x="314" y="1181" on="0"/>
        <pt x="500" y="1181" on="1"/>
        <pt x="698" y="1181" on="0"/>
        <pt x="922" y="927" on="0"/>
        <pt x="922" y="701" on="1"/>
        <pt x="922" y="638" on="1"/>
        <pt x="922" y="319" on="0"/>
        <pt x="614" y="-1" on="0"/>
        <pt x="314" y="-6" on="1"/>
        <pt x="273" y="-6" on="1"/>
        <pt x="273" y="146" on="1"/>
        <pt x="308" y="146" on="1"/>
        <pt x="712" y="153" on="0"/>
      </contour>
      <contour>
        <pt x="497" y="529" on="1"/>
        <pt x="576" y="529" on="0"/>
        <pt x="707" y="608" on="0"/>
        <pt x="737" y="672" on="1"/>
        <pt x="737" y="738" on="1"/>
        <pt x="737" y="870" on="0"/>
        <pt x="605" y="1028" on="0"/>
        <pt x="500" y="1028" on="1"/>
        <pt x="396" y="1028" on="0"/>
        <pt x="269" y="885" on="0"/>
        <pt x="269" y="777" on="1"/>
        <pt x="269" y="668" on="0"/>
        <pt x="393" y="529" on="0"/>
      </contour>
      <instructions>
        <assembly>
          SVTCA[0]	/* SetFPVectorToAxis */
          PUSHB[ ]	/* 1 value pushed */
          0
          RCVT[ ]	/* ReadCVT */
          IF[ ]	/* If */
            PUSHB[ ]	/* 1 value pushed */
            8
            MDAP[1]	/* MoveDirectAbsPt */
          ELSE[ ]	/* Else */
            PUSHB[ ]	/* 2 values pushed */
            8 28
            MIAP[0]	/* MoveIndirectAbsPt */
          EIF[ ]	/* EndIf */
          PUSHB[ ]	/* 1 value pushed */
          0
          RCVT[ ]	/* ReadCVT */
          IF[ ]	/* If */
            PUSHB[ ]	/* 1 value pushed */
            16
            MDAP[1]	/* MoveDirectAbsPt */
          ELSE[ ]	/* Else */
            PUSHB[ ]	/* 2 values pushed */
            16 18
            MIAP[0]	/* MoveIndirectAbsPt */
          EIF[ ]	/* EndIf */
          PUSHB[ ]	/* 3 values pushed */
          2 16 8
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          PUSHB[ ]	/* 1 value pushed */
          2
          MDAP[1]	/* MoveDirectAbsPt */
          PUSHB[ ]	/* 1 value pushed */
          16
          SRP0[ ]	/* SetRefPoint0 */
          PUSHB[ ]	/* 2 values pushed */
          17 1
          PUSHB[ ]	/* 1 value pushed */
          10
          CALL[ ]	/* CallFunction */
          IF[ ]	/* If */
            POP[ ]	/* PopTopStack */
            MDRP[11000]	/* MoveDirectRelPt */
          ELSE[ ]	/* Else */
            MIRP[10100]	/* MoveIndirectRelPt */
          EIF[ ]	/* EndIf */
          PUSHB[ ]	/* 1 value pushed */
          2
          SRP0[ ]	/* SetRefPoint0 */
          PUSHB[ ]	/* 2 values pushed */
          20 1
          PUSHB[ ]	/* 1 value pushed */
          10
          CALL[ ]	/* CallFunction */
          IF[ ]	/* If */
            POP[ ]	/* PopTopStack */
            MDRP[11000]	/* MoveDirectRelPt */
          ELSE[ ]	/* Else */
            MIRP[10100]	/* MoveIndirectRelPt */
          EIF[ ]	/* EndIf */
          PUSHB[ ]	/* 1 value pushed */
          8
          SRP0[ ]	/* SetRefPoint0 */
          PUSHB[ ]	/* 2 values pushed */
          27 1
          PUSHB[ ]	/* 1 value pushed */
          10
          CALL[ ]	/* CallFunction */
          IF[ ]	/* If */
            POP[ ]	/* PopTopStack */
            MDRP[11000]	/* MoveDirectRelPt */
          ELSE[ ]	/* Else */
            MIRP[10100]	/* MoveIndirectRelPt */
          EIF[ ]	/* EndIf */
          IUP[0]	/* InterpolateUntPts */
          IUP[1]	/* InterpolateUntPts */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="glyph00002" xMin="128" yMin="-16" xMax="965" yMax="1165">
      <contour>
        <pt x="164" y="579" on="1"/>
        <pt x="233" y="1165" on="1"/>
        <pt x="913" y="1165" on="1"/>
        <pt x="913" y="1003" on="1"/>
        <pt x="389" y="1003" on="1"/>
        <pt x="352" y="714" on="1"/>
        <pt x="451" y="762" on="0"/>
        <pt x="566" y="762" on="1"/>
        <pt x="750" y="762" on="0"/>
        <pt x="965" y="552" on="0"/>
        <pt x="965" y="372" on="1"/>
        <pt x="965" y="194" on="0"/>
        <pt x="742" y="-16" on="0"/>
        <pt x="546" y="-16" on="1"/>
        <pt x="375" y="-16" on="0"/>
        <pt x="141" y="161" on="0"/>
        <pt x="128" y="312" on="1"/>
        <pt x="306" y="312" on="1"/>
        <pt x="320" y="221" on="0"/>
        <pt x="448" y="135" on="0"/>
        <pt x="546" y="135" on="1"/>
        <pt x="658" y="135" on="0"/>
        <pt x="779" y="265" on="0"/>
        <pt x="779" y="378" on="1"/>
        <pt x="779" y="484" on="0"/>
        <pt x="639" y="611" on="0"/>
        <pt x="524" y="611" on="1"/>
        <pt x="419" y="611" on="0"/>
        <pt x="353" y="569" on="1"/>
        <pt x="312" y="542" on="1"/>
      </contour>
      <instructions>
        <assembly>
          PUSHB[ ]	/* 3 values pushed */
          26 30 31
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          SVTCA[0]	/* SetFPVectorToAxis */
          PUSHB[ ]	/* 1 value pushed */
          0
          RCVT[ ]	/* ReadCVT */
          IF[ ]	/* If */
            PUSHB[ ]	/* 1 value pushed */
            1
            MDAP[1]	/* MoveDirectAbsPt */
          ELSE[ ]	/* Else */
            PUSHB[ ]	/* 2 values pushed */
            1 28
            MIAP[0]	/* MoveIndirectAbsPt */
          EIF[ ]	/* EndIf */
          PUSHB[ ]	/* 1 value pushed */
          0
          RCVT[ ]	/* ReadCVT */
          IF[ ]	/* If */
            PUSHB[ ]	/* 1 value pushed */
            13
            MDAP[1]	/* MoveDirectAbsPt */
          ELSE[ ]	/* Else */
            PUSHB[ ]	/* 2 values pushed */
            13 18
            MIAP[0]	/* MoveIndirectAbsPt */
          EIF[ ]	/* EndIf */
          PUSHB[ ]	/* 1 value pushed */
          1
          SRP0[ ]	/* SetRefPoint0 */
          PUSHB[ ]	/* 2 values pushed */
          3 1
          PUSHB[ ]	/* 1 value pushed */
          10
          CALL[ ]	/* CallFunction */
          IF[ ]	/* If */
            POP[ ]	/* PopTopStack */
            MDRP[11000]	/* MoveDirectRelPt */
          ELSE[ ]	/* Else */
            MIRP[10100]	/* MoveIndirectRelPt */
          EIF[ ]	/* EndIf */
          PUSHB[ ]	/* 3 values pushed */
          7 1 13
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          PUSHB[ ]	/* 1 value pushed */
          7
          MDAP[1]	/* MoveDirectAbsPt */
          PUSHB[ ]	/* 2 values pushed */
          26 1
          PUSHB[ ]	/* 1 value pushed */
          10
          CALL[ ]	/* CallFunction */
          IF[ ]	/* If */
            POP[ ]	/* PopTopStack */
            MDRP[11000]	/* MoveDirectRelPt */
          ELSE[ ]	/* Else */
            MIRP[10100]	/* MoveIndirectRelPt */
          EIF[ ]	/* EndIf */
          PUSHB[ ]	/* 3 values pushed */
          5 7 26
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          PUSHB[ ]	/* 1 value pushed */
          13
          SRP0[ ]	/* SetRefPoint0 */
          PUSHB[ ]	/* 1 value pushed */
          17
          MDRP[10000]	/* MoveDirectRelPt */
          PUSHB[ ]	/* 1 value pushed */
          13
          SRP0[ ]	/* SetRefPoint0 */
          PUSHB[ ]	/* 2 values pushed */
          20 1
          PUSHB[ ]	/* 1 value pushed */
          10
          CALL[ ]	/* CallFunction */
          IF[ ]	/* If */
            POP[ ]	/* PopTopStack */
            MDRP[11000]	/* MoveDirectRelPt */
          ELSE[ ]	/* Else */
            MIRP[10100]	/* MoveIndirectRelPt */
          EIF[ ]	/* EndIf */
          PUSHB[ ]	/* 1 value pushed */
          7
          SRP0[ ]	/* SetRefPoint0 */
          PUSHB[ ]	/* 1 value pushed */
          29
          MDRP[10000]	/* MoveDirectRelPt */
          IUP[0]	/* InterpolateUntPts */
          IUP[1]	/* InterpolateUntPts */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="glyph00003" xMin="48" yMin="0" xMax="996" yMax="1165">
      <contour>
        <pt x="821" y="413" on="1"/>
        <pt x="996" y="413" on="1"/>
        <pt x="996" y="262" on="1"/>
        <pt x="821" y="262" on="1"/>
        <pt x="821" y="0" on="1"/>
        <pt x="635" y="0" on="1"/>
        <pt x="635" y="262" on="1"/>
        <pt x="51" y="262" on="1"/>
        <pt x="48" y="377" on="1"/>
        <pt x="626" y="1165" on="1"/>
        <pt x="821" y="1165" on="1"/>
      </contour>
      <contour>
        <pt x="246" y="413" on="1"/>
        <pt x="635" y="413" on="1"/>
        <pt x="635" y="921" on="1"/>
        <pt x="609" y="874" on="1"/>
      </contour>
      <instructions>
        <assembly>
          PUSHB[ ]	/* 3 values pushed */
          14 15 16
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          PUSHB[ ]	/* 1 value pushed */
          14
          SRP0[ ]	/* SetRefPoint0 */
          PUSHB[ ]	/* 1 value pushed */
          9
          MDRP[10000]	/* MoveDirectRelPt */
          SVTCA[0]	/* SetFPVectorToAxis */
          PUSHB[ ]	/* 1 value pushed */
          0
          RCVT[ ]	/* ReadCVT */
          IF[ ]	/* If */
            PUSHB[ ]	/* 1 value pushed */
            9
            MDAP[1]	/* MoveDirectAbsPt */
          ELSE[ ]	/* Else */
            PUSHB[ ]	/* 2 values pushed */
            9 28
            MIAP[0]	/* MoveIndirectAbsPt */
          EIF[ ]	/* EndIf */
          PUSHB[ ]	/* 1 value pushed */
          0
          RCVT[ ]	/* ReadCVT */
          IF[ ]	/* If */
            PUSHB[ ]	/* 1 value pushed */
            4
            MDAP[1]	/* MoveDirectAbsPt */
          ELSE[ ]	/* Else */
            PUSHB[ ]	/* 2 values pushed */
            4 18
            MIAP[0]	/* MoveIndirectAbsPt */
          EIF[ ]	/* EndIf */
          PUSHB[ ]	/* 3 values pushed */
          1 9 4
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          PUSHB[ ]	/* 1 value pushed */
          1
          MDAP[1]	/* MoveDirectAbsPt */
          PUSHB[ ]	/* 2 values pushed */
          2 1
          PUSHB[ ]	/* 1 value pushed */
          10
          CALL[ ]	/* CallFunction */
          IF[ ]	/* If */
            POP[ ]	/* PopTopStack */
            MDRP[11000]	/* MoveDirectRelPt */
          ELSE[ ]	/* Else */
            MIRP[10100]	/* MoveIndirectRelPt */
          EIF[ ]	/* EndIf */
          PUSHB[ ]	/* 1 value pushed */
          6
          MDRP[10000]	/* MoveDirectRelPt */
          PUSHB[ ]	/* 1 value pushed */
          1
          SRP0[ ]	/* SetRefPoint0 */
          PUSHB[ ]	/* 1 value pushed */
          11
          MDRP[10000]	/* MoveDirectRelPt */
          PUSHB[ ]	/* 3 values pushed */
          13 9 4
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          IUP[0]	/* InterpolateUntPts */
          IUP[1]	/* InterpolateUntPts */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="glyph00004" xMin="78" yMin="-16" xMax="927" yMax="1181">
      <contour>
        <pt x="352" y="667" on="1"/>
        <pt x="474" y="667" on="1"/>
        <pt x="592" y="667" on="0"/>
        <pt x="721" y="766" on="0"/>
        <pt x="721" y="850" on="1"/>
        <pt x="721" y="933" on="0"/>
        <pt x="613" y="1029" on="0"/>
        <pt x="501" y="1029" on="1"/>
        <pt x="403" y="1029" on="0"/>
        <pt x="276" y="938" on="0"/>
        <pt x="276" y="861" on="1"/>
        <pt x="91" y="861" on="1"/>
        <pt x="91" y="1001" on="0"/>
        <pt x="321" y="1181" on="0"/>
        <pt x="500" y="1181" on="1"/>
        <pt x="688" y="1181" on="0"/>
        <pt x="906" y="1006" on="0"/>
        <pt x="906" y="850" on="1"/>
        <pt x="906" y="771" on="0"/>
        <pt x="805" y="634" on="0"/>
        <pt x="714" y="597" on="1"/>
        <pt x="927" y="533" on="0"/>
        <pt x="927" y="324" on="1"/>
        <pt x="927" y="170" on="0"/>
        <pt x="694" y="-16" on="0"/>
        <pt x="501" y="-16" on="1"/>
        <pt x="312" y="-16" on="0"/>
        <pt x="78" y="163" on="0"/>
        <pt x="78" y="313" on="1"/>
        <pt x="263" y="313" on="1"/>
        <pt x="263" y="234" on="0"/>
        <pt x="394" y="135" on="0"/>
        <pt x="502" y="135" on="1"/>
        <pt x="614" y="135" on="0"/>
        <pt x="741" y="233" on="0"/>
        <pt x="741" y="324" on="1"/>
        <pt x="741" y="519" on="0"/>
        <pt x="465" y="519" on="1"/>
        <pt x="352" y="519" on="1"/>
      </contour>
      <instructions>
        <assembly>
          PUSHB[ ]	/* 3 values pushed */
          32 39 40
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          SVTCA[0]	/* SetFPVectorToAxis */
          PUSHB[ ]	/* 1 value pushed */
          0
          RCVT[ ]	/* ReadCVT */
          IF[ ]	/* If */
            PUSHB[ ]	/* 1 value pushed */
            14
            MDAP[1]	/* MoveDirectAbsPt */
          ELSE[ ]	/* Else */
            PUSHB[ ]	/* 2 values pushed */
            14 28
            MIAP[0]	/* MoveIndirectAbsPt */
          EIF[ ]	/* EndIf */
          PUSHB[ ]	/* 1 value pushed */
          0
          RCVT[ ]	/* ReadCVT */
          IF[ ]	/* If */
            PUSHB[ ]	/* 1 value pushed */
            25
            MDAP[1]	/* MoveDirectAbsPt */
          ELSE[ ]	/* Else */
            PUSHB[ ]	/* 2 values pushed */
            25 18
            MIAP[0]	/* MoveIndirectAbsPt */
          EIF[ ]	/* EndIf */
          PUSHB[ ]	/* 3 values pushed */
          1 14 25
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          PUSHB[ ]	/* 1 value pushed */
          1
          MDAP[1]	/* MoveDirectAbsPt */
          PUSHB[ ]	/* 3 values pushed */
          191 1 1
          DELTAP1[ ]	/* DeltaExceptionP1 */
          PUSHB[ ]	/* 5 values pushed */
          175 1 191 1 2
          DELTAP2[ ]	/* DeltaExceptionP2 */
          PUSHB[ ]	/* 5 values pushed */
          223 1 239 1 2
          DELTAP1[ ]	/* DeltaExceptionP1 */
          PUSHB[ ]	/* 5 values pushed */
          31 1 47 1 2
          DELTAP1[ ]	/* DeltaExceptionP1 */
          PUSHB[ ]	/* 5 values pushed */
          111 1 127 1 2
          DELTAP3[ ]	/* DeltaExceptionP3 */
          PUSHB[ ]	/* 1 value pushed */
          14
          SRP0[ ]	/* SetRefPoint0 */
          PUSHB[ ]	/* 2 values pushed */
          7 1
          PUSHB[ ]	/* 1 value pushed */
          10
          CALL[ ]	/* CallFunction */
          IF[ ]	/* If */
            POP[ ]	/* PopTopStack */
            MDRP[11000]	/* MoveDirectRelPt */
          ELSE[ ]	/* Else */
            MIRP[10100]	/* MoveIndirectRelPt */
          EIF[ ]	/* EndIf */
          PUSHB[ ]	/* 1 value pushed */
          14
          SRP0[ ]	/* SetRefPoint0 */
          PUSHB[ ]	/* 1 value pushed */
          10
          MDRP[10000]	/* MoveDirectRelPt */
          PUSHB[ ]	/* 1 value pushed */
          1
          SRP0[ ]	/* SetRefPoint0 */
          PUSHB[ ]	/* 2 values pushed */
          37 1
          PUSHB[ ]	/* 1 value pushed */
          10
          CALL[ ]	/* CallFunction */
          IF[ ]	/* If */
            POP[ ]	/* PopTopStack */
            MDRP[11000]	/* MoveDirectRelPt */
          ELSE[ ]	/* Else */
            MIRP[10100]	/* MoveIndirectRelPt */
          EIF[ ]	/* EndIf */
          PUSHB[ ]	/* 3 values pushed */
          20 37 1
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          PUSHB[ ]	/* 1 value pushed */
          25
          SRP0[ ]	/* SetRefPoint0 */
          PUSHB[ ]	/* 1 value pushed */
          29
          MDRP[10000]	/* MoveDirectRelPt */
          PUSHB[ ]	/* 1 value pushed */
          25
          SRP0[ ]	/* SetRefPoint0 */
          PUSHB[ ]	/* 2 values pushed */
          32 1
          PUSHB[ ]	/* 1 value pushed */
          10
          CALL[ ]	/* CallFunction */
          IF[ ]	/* If */
            POP[ ]	/* PopTopStack */
            MDRP[11000]	/* MoveDirectRelPt */
          ELSE[ ]	/* Else */
            MIRP[10100]	/* MoveIndirectRelPt */
          EIF[ ]	/* EndIf */
          IUP[0]	/* InterpolateUntPts */
          IUP[1]	/* InterpolateUntPts */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="glyph00005" xMin="78" yMin="0" xMax="970" yMax="1181">
      <contour>
        <pt x="970" y="0" on="1"/>
        <pt x="105" y="0" on="1"/>
        <pt x="105" y="131" on="1"/>
        <pt x="532" y="544" on="1"/>
        <pt x="635" y="638" on="0"/>
        <pt x="728" y="777" on="0"/>
        <pt x="728" y="842" on="1"/>
        <pt x="728" y="924" on="0"/>
        <pt x="612" y="1029" on="0"/>
        <pt x="518" y="1029" on="1"/>
        <pt x="397" y="1029" on="0"/>
        <pt x="264" y="917" on="0"/>
        <pt x="264" y="810" on="1"/>
        <pt x="78" y="810" on="1"/>
        <pt x="78" y="975" on="0"/>
        <pt x="323" y="1181" on="0"/>
        <pt x="518" y="1181" on="1"/>
        <pt x="700" y="1181" on="0"/>
        <pt x="914" y="995" on="0"/>
        <pt x="914" y="846" on="1"/>
        <pt x="914" y="765" on="0"/>
        <pt x="815" y="591" on="0"/>
        <pt x="660" y="430" on="1"/>
        <pt x="332" y="151" on="1"/>
        <pt x="970" y="151" on="1"/>
      </contour>
      <instructions>
        <assembly>
          PUSHB[ ]	/* 3 values pushed */
          9 25 26
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          SVTCA[0]	/* SetFPVectorToAxis */
          PUSHB[ ]	/* 1 value pushed */
          0
          RCVT[ ]	/* ReadCVT */
          IF[ ]	/* If */
            PUSHB[ ]	/* 1 value pushed */
            16
            MDAP[1]	/* MoveDirectAbsPt */
          ELSE[ ]	/* Else */
            PUSHB[ ]	/* 2 values pushed */
            16 28
            MIAP[0]	/* MoveIndirectAbsPt */
          EIF[ ]	/* EndIf */
          PUSHB[ ]	/* 1 value pushed */
          0
          RCVT[ ]	/* ReadCVT */
          IF[ ]	/* If */
            PUSHB[ ]	/* 1 value pushed */
            0
            MDAP[1]	/* MoveDirectAbsPt */
          ELSE[ ]	/* Else */
            PUSHB[ ]	/* 2 values pushed */
            0 18
            MIAP[0]	/* MoveIndirectAbsPt */
          EIF[ ]	/* EndIf */
          PUSHB[ ]	/* 2 values pushed */
          23 1
          PUSHB[ ]	/* 1 value pushed */
          10
          CALL[ ]	/* CallFunction */
          IF[ ]	/* If */
            POP[ ]	/* PopTopStack */
            MDRP[11000]	/* MoveDirectRelPt */
          ELSE[ ]	/* Else */
            MIRP[10100]	/* MoveIndirectRelPt */
          EIF[ ]	/* EndIf */
          PUSHB[ ]	/* 1 value pushed */
          2
          MDRP[10000]	/* MoveDirectRelPt */
          PUSHB[ ]	/* 3 values pushed */
          3 16 0
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          PUSHB[ ]	/* 1 value pushed */
          16
          SRP0[ ]	/* SetRefPoint0 */
          PUSHB[ ]	/* 2 values pushed */
          9 1
          PUSHB[ ]	/* 1 value pushed */
          10
          CALL[ ]	/* CallFunction */
          IF[ ]	/* If */
            POP[ ]	/* PopTopStack */
            MDRP[11000]	/* MoveDirectRelPt */
          ELSE[ ]	/* Else */
            MIRP[10100]	/* MoveIndirectRelPt */
          EIF[ ]	/* EndIf */
          PUSHB[ ]	/* 1 value pushed */
          16
          SRP0[ ]	/* SetRefPoint0 */
          PUSHB[ ]	/* 1 value pushed */
          12
          MDRP[10000]	/* MoveDirectRelPt */
          PUSHB[ ]	/* 3 values pushed */
          22 0 16
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          IUP[0]	/* InterpolateUntPts */
          IUP[1]	/* InterpolateUntPts */
        </assembly>
      </instructions>
    </TTGlyph>

  </glyf>

  <name>
    <namerecord nameID="0" platformID="3" platEncID="1" langID="0x409">
      Copyright 2011 Google Inc. All Rights Reserved.
    </namerecord>
    <namerecord nameID="1" platformID="3" platEncID="1" langID="0x409">
      Roboto
    </namerecord>
    <namerecord nameID="2" platformID="3" platEncID="1" langID="0x409">
      Regular
    </namerecord>
    <namerecord nameID="3" platformID="3" platEncID="1" langID="0x409">
      Roboto
    </namerecord>
    <namerecord nameID="4" platformID="3" platEncID="1" langID="0x409">
      Roboto
    </namerecord>
    <namerecord nameID="5" platformID="3" platEncID="1" langID="0x409">
      Version 2.137; 2017
    </namerecord>
    <namerecord nameID="6" platformID="3" platEncID="1" langID="0x409">
      Roboto-Regular
    </namerecord>
    <namerecord nameID="7" platformID="3" platEncID="1" langID="0x409">
      Roboto is a trademark of Google.
    </namerecord>
    <namerecord nameID="9" platformID="3" platEncID="1" langID="0x409">
      Google
    </namerecord>
    <namerecord nameID="11" platformID="3" platEncID="1" langID="0x409">
      Google.com
    </namerecord>
    <namerecord nameID="12" platformID="3" platEncID="1" langID="0x409">
      Christian Robertson
    </namerecord>
    <namerecord nameID="13" platformID="3" platEncID="1" langID="0x409">
      Licensed under the Apache License, Version 2.0
    </namerecord>
    <namerecord nameID="14" platformID="3" platEncID="1" langID="0x409">
      http://www.apache.org/licenses/LICENSE-2.0
    </namerecord>
  </name>

  <post>
    <formatType value="3.0"/>
    <italicAngle value="0.0"/>
    <underlinePosition value="-150"/>
    <underlineThickness value="100"/>
    <isFixedPitch value="0"/>
    <minMemType42 value="0"/>
    <maxMemType42 value="0"/>
    <minMemType1 value="0"/>
    <maxMemType1 value="0"/>
  </post>

</ttFont>
